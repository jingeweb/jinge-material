!function(){const e={locale:"zh_cn",dictionary:{"R;QsV":"jinge 框架还处于实验性的 alpha 阶段，也还几乎没有文档。此处的 Jinge Material 组件库的文档也不保证有效。","kD&HL":"Jinge Material 组件库没有直接依赖 jinge 框架内置的国际化方案，而是自己实现了一套国际化方案。因为使用 Jinge Material 组件的项目不一定需要支持多语言。接下来会分不同的情况，介绍如何使用不同语言的 Jinge Material 组件。","e|?]I":"使用 npm 或 yarn 包","Y*%)o":"项目只使用一种语言","g]9n;":"如果只需要支持一种语言，只需要在项目的入口文件里，加入以下的代码：","1%g'=":"Jinge Material 组件库没有默认的语言，因此必须指定语言并引入语言资源。","WrO9 ":"项目使用多种语言","ZNwh]":"如果需要支持多种语言，建议一次性将项目需要支持的语言资源全部引入。这样做的好处是切换语言时不再需要额外的通过 ajax 加载资源的逻辑，并且 Jinge Material 的语言资源也很小，不会引入带宽负担。加载的资源可以存放在某个 service 中，比如：","In~Vg":"然后将上述的 service 暴露给业务层，比如项目的入口文件设置默认语言，或者在某个按钮的点击事件中切换语言：",wCQHm:"使用浏览器引入的 script",fKG47:"通过浏览器引入 script 的方式使用 Jinge Material 时，多语言资源文件需要保证在 jinge-material.min.js 文件之后执行。语言资源文件会向 `JingeMaterial` 对象的 `locales` 属性字典写入对应的值。然后在业务代码中，只需要使用这个 `locales` 属性，即可得到所有语言资源。","g4>*S":"具体来讲，在 html 文件中，用如下的方式加载 script：","p8Wl&":"也可以一次性加载涵盖所有语言资源的包（Gzip 压缩和 CDN 加载后，加载全部语言资源也几乎不影响启动速度）：",WuHtV:"然后在业务 js 代码中，用如下的方式配置默认语言（或切换语言）：","C|n*K":"上述代码需要在打包工具中配置对 jinge-material 的引用指向 window.JingeMaterial 对象，比如 webpack.config.js 中配置 externals。","XKA@%":"补充","y#O<H":"通过 npm 或 yarn 包的方式使用 jinge-materail，但又一定要用 ajax 的方式按需加载语言资源，可以有不同的实现方式。其中一种方式是，以文本的形式 fetch 到语言资源的源码，然后通过 `new Function()` 的形式包裹并执行该源码，同时传递一个 `JingeMaterial` 对象给上下文："}};"undefined"!=typeof jinge?jinge.i18n.__regLoc(e):window.JINGE_I18N_DATA=e}();