!function(){const e={locale:"en",dictionary:{"R;QsV":"The jinge framework is still experimental and there is almost no documentation. The documentation for the Jinge Material component library here is also not guaranteed to be valid.","kD&HL":"The Jinge Material component library does not directly rely on the internationalization scheme built into the jinge framework, but implements a set of internationalization schemes by itself. Because projects using Jinge Material components do not necessarily need to support multiple languages. Next, I will introduce how to use Jinge Material components in different languages in different situations.","e|?]I":"Use npm or yarn packages","Y*%)o":"Project uses only one language","g]9n;":"If you only need to support one language, just add the following code to the project's entry file:","1%g'=":"The Jinge Material component library does not have a default language, so you must specify a language and import language resources.","WrO9 ":"Project uses multiple languages","ZNwh]":"If you need to support multiple languages, it is recommended to introduce all the language resources that the project needs to support at one time. The advantage of this is that no additional logic for loading resources through ajax is needed when switching languages, and the language resources of Jinge Material are also very small, which will not introduce bandwidth burden. Loaded resources can be stored in a service, such as:","In~Vg":"Then expose the above service to the business layer, such as setting the default language for the entry file of the project, or switching the language in the event of a button click:",wCQHm:"Import script in browser",fKG47:"When using Jinge Material through the browser to import script, the multilingual resource file needs to be guaranteed to be executed after the jinge-material.min.js file. The language resource file writes the corresponding values to the locales attribute dictionary of the JingeMaterial object. Then in the business code, just use this `locales` property to get all the language resources.","g4>*S":"Specifically, in the html file, load the script as follows:","p8Wl&":"It is also possible to load a package that covers all language resources at once (after Gzip compression and CDN loading, loading all language resources has almost no impact on startup speed):",WuHtV:"Then in the business js code, configure the default language (or switch languages) as follows:","C|n*K":"The above code needs to configure the reference to jinge-material in the packaging tool to point to the window.JingeMaterial object, such as externals in webpack.config.js.","XKA@%":"Supplement","y#O<H":"If you wanâ€™t to use jinge-materail through npm or yarn packages and use ajax to load language resources on demand, there are different implementations. One way is to fetch the source code of the language resource in text form, then wrap and execute the source code in the form of `new Function ()`, while passing a `JingeMaterial` object to the context:"}};"undefined"!=typeof jinge?jinge.i18n.__regLoc(e):window.JINGE_I18N_DATA=e}();