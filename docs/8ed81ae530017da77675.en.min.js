!function(){const e={locale:"en",dictionary:{"cN2y#":"Name","irK?+":"Description",o1PP5:"Default","b7z[W":"Parameters","gFAi|":"Ok","n#z;W":"Open or close dialog","ZfYW-":"Enable/disable the dialog overlay","V|k~]":"By the default the dialog will close when pressing esc. To disabled that, just set this prop as false","bHJ`q":"By the default the dialog will close when clicking outsite. To disabled that, just set this prop as false","vn'O<":"The dialog will become fullscreen on mobile screens. This option can disable this behavior.","x}(Kg":"Triggered when a dialog opens","d ;bt":"Triggered when a dialog closes","Gs{vh":"Triggered when clicked outside","Na;97":"The alert title. Optional.","yY4`/":"The alert content. Accepts HTML. Optional.","I[<c@":"The text inside confirm button","S9 _S":"The confirm title. Optional.","GL~dA":"The confirm content. Accepts HTML. Optional.","tn'*p":"The text inside cancel button","GJ@ 6":"Cancel","V*EJ)":"Specifies whether the button is loading. When this parameter is true, the confirm button displays md-spinner and is disabled.","S CM<":"Triggered when the confirm button receives a click","0aIX}":"Triggered when the cancel button receives a click","K2(~":"Default value of input","JmJ Q":"Sets whether input is required","bbOv-":"Enables the character count, based on the given value.","rA,F=":"Sets a optional placeholder on input.","y}Pbz":"The alert title. Optional.",HxX$A:"Dialogs informs users about a specific task and may contain critical information, require decisions, or involve multiple tasks. The dialog component works with any plain html content. You can have tabs inside, all form components and many more.","q1tW!":"The component can be used with a custom markup, using the auxiliary components or with presets made by Vue Material. Those presets emulates the default Dialogs from Javascript, like confirm, alert and prompt.","nBl?[":"Dialog","Y|U>n":"The Dialog component can have any HTML markup inside. This allows you to create rich dialog content, like the details of a table row, for example:",Wapaw:"Alert Dialog","7o<oM":"Confirm Dialog",B2vhb:"In actual business use, there is a common situation that the server's api interface update is called in the confirm callback, the dialog box is closed after the api request is successful (if it fails, the user is allowed to retry), and the confirm button during the api request cannot click and has spinner status.","p;RNo":"In this case, confirmCallback allows you to return false to prevent the dialog from closing, and also allows you to return a Promise object directly. The dialog will wait for the promise, and will not close the dialog until the data returned by its resolve is not false.","m]M6?":"Prompt Dialog","SI?AN":"Use Google's location service?","Xi(2y":"Let Google help apps determine location. <br> This means sending <strong>anonymous</strong> location data to Google, even when no apps are running.","N&p#]":"Agree","MIr*B":"Disagree","Z'/uk":"Your post has been deleted!","FO%O%":"Cool!","GVxi=":"Post created!",bCayS:"Your post <strong>Material Design is awesome</strong> has been created.","Kw#Qq":"What's your name?",rUAQw:"Type your name...","GG<<Q":"Name must starts with character 'a'!","xTjS[":"Hello, ${name}"},render:function(e,t,o,n,i,s,a,r,l,c){return{components:{"s`A3H":function(t,n,i){return[e(t,"You can use the "),(()=>{const e=s("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"md-dialog-alert");return t[o].rootNodes.push(e),e})(),e(t," component in the html template, or you can directly call the "),(()=>{const e=s("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"DialogAlert");return t[o].rootNodes.push(e),e})(),e(t," component's static function "),(()=>{const e=s("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"show");return t[o].rootNodes.push(e),e})(),e(t," in the js code.")]},"Ds|M3":function(t,n,i){return[e(t,"The first parameter of the "),(()=>{const e=s("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"DialogAlert.show");return t[o].rootNodes.push(e),e})(),e(t," function is a required option of type Object. The attributes that can be specified by this option are the same as those of the "),(()=>{const e=s("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"md-dialog-alert");return t[o].rootNodes.push(e),e})(),e(t," component.")]},"mL`@0":function(t,n,i){return[e(t,"The second parameter received by this function is an optional callback function after closing the dialog. If the callback function returns "),(()=>{const e=s("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"false");return t[o].rootNodes.push(e),e})(),e(t," it will prevent the dialog from closing.")]},"DcR=F":function(t,n,i){return[e(t,"To display the confirm dialog, you can use the "),(()=>{const e=s("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"md-dialog-confirm");return t[o].rootNodes.push(e),e})(),e(t," component in the html template, or you can directly call the "),(()=>{const e=s("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"DialogConfirm");return t[o].rootNodes.push(e),e})(),e(t," component's static function "),(()=>{const e=s("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"show");return t[o].rootNodes.push(e),e})(),e(t," in the js code. ")]},"s@tS=":function(t,n,i){return[e(t,"The first parameter of the "),(()=>{const e=s("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"DialogConfirm.show");return t[o].rootNodes.push(e),e})(),e(t," function is a required option of type Object. The attributes that can be specified by this option are the same as those of the "),(()=>{const e=s("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"md-dialog-confirm");return t[o].rootNodes.push(e),e})(),e(t," component.")]},oTydu:function(t,n,i){return[e(t,"The optional second and third parameters received by this function are the callbacks for confirmation and cancellation in order. If the callback function returns "),(()=>{const e=s("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"false");return t[o].rootNodes.push(e),e})(),e(t,", it will prevent the dialog from closing.")]},"k$(Pn":function(t,n,i){return[e(t,"The prompt dialog is similar to the comfirm dialog, you can use the "),(()=>{const e=s("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"md-dialog-prompt");return t[o].rootNodes.push(e),e})(),e(t," component in the html template, or you can directly call the "),(()=>{const e=s("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"DialogPrompt");return t[o].rootNodes.push(e),e})(),e(t," component's static function "),(()=>{const e=s("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"show");return t[o].rootNodes.push(e),e})(),e(t," in the js code. ")]},"u)?qw":function(t,n,i){return[e(t,"The parameters of the "),(()=>{const e=s("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"DialogPrompt.show");return t[o].rootNodes.push(e),e})(),e(t," function are the same as those of "),(()=>{const e=s("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"DialogConfirm.show");return t[o].rootNodes.push(e),e})(),e(t,", but there is one difference: if confirmCallback returns a string, it will be considered as an error prompt for the input value; if it returns Promise, for the rejected data or the resolved string will also be considered as an error prompt.")]}},attributes:{}}}};"undefined"!=typeof jinge?jinge.i18n.__regLoc(e):window.JINGE_I18N_DATA=e}();