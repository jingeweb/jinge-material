!function(){const e={locale:"zh_cn",dictionary:{"t#i13":"完全依赖 CSS 变量（css3 variable）来实现颜色的指定和色板的切换。","e{<F#":"完全遵循 Material Design 最新的设计规范中关于色板的规定，包括暗色主题。","P#&-N":"预置主题",tBL9D:"自定义主题","6GDNX":"自定义主题可以通过加载自定义的主题文件（即色板文件）实现。色板里颜色的定义严格遵循 Material Design 的规范。可在参考 dist 目录下构建好的色板 css 文件创建自定义色板文件，也可以参考下面的 scss 源码创建并构建色板文件：",Qdary:"切换主题","r^Kx":"组件的颜色全部通过 CSS 变量引用色板中定义的颜色，因此切换主题只需要简单地替换色板文件即可。从技术角度讲，替换色板本质上是替换(覆盖) CSS 变量的值。"},render:function(e,t,n,o,r,s,c,i,u,l){return{components:{"3cUZ|":function(s,c,i){return[e(s,"Jinge Material 组件库"),...(()=>{const i=t({[n]:{compStyle:{...s[n].compStyle,[c||""]:c||null},context:s[n].context,slots:{default:function(t){return[e(t,"移植自 Vue Material")]}}},to:"about"}),u=r.create(i);return s[n].rootNodes.push(u),o(u.__render())})(),e(s,"，但在多主题的支持上，进行了彻底地重构。主要包括两个方面：")]},"2%LyN":function(t,o,r){return[e(t,"Jinge Material 提供了 4 个预先构建好的主题，包括蓝色（default）、紫色（purple）、暗色蓝（default-dark）和暗色紫（purple-dark）。构建好的主题文件位于 "),(()=>{const e=s("code",Object.assign({[o||""]:o?"":null},t[n].compStyle),"dist/themes");return t[n].rootNodes.push(e),e})(),e(t," 目录下，使用时只需要和主样式文件一起加载即可：")]},"7BaN2":function(t,o,r){return[e(t,"有多种方式可以实现替换（覆盖）CSS 变量的值。一种简单的方案是，在 html 中加载默认的色板时，为 "),(()=>{const e=s("code",Object.assign({[o||""]:o?"":null},t[n].compStyle),"link");return t[n].rootNodes.push(e),e})(),e(t," 元素赋予 id 属性，然后在切换主题的 js 逻辑里，通过这个 id 删除旧的"),(()=>{const e=s("code",Object.assign({[o||""]:o?"":null},t[n].compStyle),"link");return t[n].rootNodes.push(e),e})(),e(t," 元素，然后\b插入一个指向新主题色板的 css 文件的 "),(()=>{const e=s("code",Object.assign({[o||""]:o?"":null},t[n].compStyle),"link");return t[n].rootNodes.push(e),e})(),e(t," 元素。")]}},attributes:{}}}};"undefined"!=typeof jinge?jinge.i18n.__regLoc(e):window.JINGE_I18N_DATA=e}();