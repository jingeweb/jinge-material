!function(){const e={locale:"en",dictionary:{"cN2y#":"Name","irK?+":"Description",o1PP5:"Default","b7z[W":"Parameters","8=]v":"Custom Template","VJ~aM":"Enables/Disables the click action in the chip.","O;!@*":"Creates a chip that can hold a delete action. Useful when editing a chip series, like tags or categories.","U)T3F":"Enables/Disables the chip to be clickable of deletable.","YJSl{":"Triggered after a mouse click on delete icon. Only fired when md-deletable is true.","Q0(D7":"The content to be displayed as chips. Need to be a array of strings, unless you specify a custom template.","R{%Z|":"The input id. If null, it will be created automatically.","Q<  O":"The input type. Cannot be file.","04M`R":"The input placeholder. It is useful to show to the user which type of data will be inserted.","rl(vE":"Creates a non-editable chips. Useful to show inside a details page.","DwX*J":"Blocks the chips to create items above the limit.","MD?;w":"Always check if there is a duplicated chip while changing the input value, or check it only on insertion","vvp3/":"Triggered when chips change, inserted or deleted.","O&( n":"Triggered after a mouse click on delete icon of a chip.","68'j0":"Triggered after a mouse click on a single chip.","uNMw)":"Triggered after a chip inserted.","SF=%_":"The last inserted chip","FIt.%":"Chips represent complex entities in small blocks, such as a contact. They can be used as a way for a user to create arbitrary items, like categories or tags.","2EVWF":"Standalone Chip","R 5.'":"A chip can be used as standalone, without any connection with another chip. It can be used like a badge or a category of an entity in your application. You can specify if your chip can be deletable and clickable:","Xe!f9":"Editable Chips","vv[9P":"Sometimes we need to edit the set of items on screen, for example, when editing tags, the user may need to remove/add tags. In this case you can use the editable chips, that is the default behaviour:","V`,;6":"Readonly","5{[H;":"Sometimes we need to show more information about a chip, so we want to have a custom HTML structure for the chip itself. To create that scenario we can use the template scope. In this case all you have to do is to create a slot with your custom template and you're good to go. Take a look at this example:","4Q)w_":"Duplicated Chip","v/@G,":"Chips would reject insertion if a chip is duplicated. You can customize feedback style of the duplicated chip:","VY+6=":"Hue Colors","Vp{=z":"Clips"},render:function(e,t,i,a,o,n,s,c,l,h){return{components:{"VPt&'":function(t,a,o){return[e(t,"Let's think in an entity that have tags. Sometimes you might need to show all of them in a single row, but not allow the user to edit them. You can achieve that using the "),(()=>{const e=n("code",Object.assign({[a||""]:a?"":null},t[i].compStyle),"md-chips");return t[i].rootNodes.push(e),e})(),e(t," component, with a static option:")]},"1-J7g":function(t,i,a){return[e(t,"You can always use the hue modifiers in single chips:")]}},attributes:{}}}};"undefined"!=typeof jinge?jinge.i18n.__regLoc(e):window.JINGE_I18N_DATA=e}();