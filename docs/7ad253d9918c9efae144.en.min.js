!function(){const e={locale:"en",dictionary:{"mS`fT":"Jinge Material is a Material Design component library built on the jinge framework. It is assumed here that you already know how to build a basic jinge framework project, such as how to configure and use jinge-loader in webpack.","W@<d.":"The jinge framework is still experimental, and there is almost no documentation. The documentation for the Jinge Material component library here is also not guaranteed to be valid. Therefore, the best way to experience the jinge framework and Jinge Material component library is to clone Jinge Material's source code repository directly. This repository contains the source code for all components, as well as a complete application that covers all component usage examples (that is, the website you see now).","Cq%7.":"Install","3e2*H":"To use the Jinge Material component library, you need to install it through npm or yarn first:","Hg_i@":"Usage","w'chO":"We recommend using the compiled release version. The style files are located in the jinge-material/dist directory and the component files are located in the jinge-material/lib directory. At the same time, we recommend introducing components as needed to get the fastest build speed and development experience.","J]*]H":"Introduce styles and language packs in the project's entry js file:",nXtA3:"Use components as needed in the template html file:","U]&7D":"Import in Browser","Rzxy+":"For a large front-end project with a microservice architecture, it is possible that multiple dynamically loaded services / modules will use the jinge framework and the Jinge Material component library. In this case, you need to introduce styles, language resources and Component library:",Fqrh_:"Then you can simply reference the component in the template html text:","y_[J8":"The above code needs to configure the external dependencies of the packaging tool (such as webpack externals) so that jinge-material actually points to the window.JingeMaterial object.",mlRwg:"Using component aliases","wBX^%":"The jinge framework supports registering custom component aliases, so that you can use them directly in the template html file without importing components. The Jinge Material component library provides default aliases, just register in the webpack.config.js file:","ryTb|":"Load styles on demand","5%z#N":"The above usage methods will completely load all the style files. You can load styles and components on demand by using Jinge Material source code directly. You can clone this scaffolding project, which contains a complete example of a webpack configuration file, which will not be repeated here."},render:function(e,t,o,n,a,i,r,s,l,c){return{components:{"s2=Cr":function(i,r,s){return[e(i,"Jinge Material component library supports multiple style themes and multiple languages, but there is no default style or language. Therefore, using only one style or language also requires proactive registration of resources. If your project needs to support multiple themes and languages, see the "),...(()=>{const s=t({[o]:{compStyle:{...i[o].compStyle,[r||""]:r||null},context:i[o].context,slots:{default:function(t){return[e(t,"I18N")]}}},to:"i18n"}),l=a.create(s);return i[o].rootNodes.push(l),n(l.__render())})(),e(i," and "),...(()=>{const s=t({[o]:{compStyle:{...i[o].compStyle,[r||""]:r||null},context:i[o].context,slots:{default:function(t){return[e(t,"Theme")]}}},to:"theme"}),l=a.create(s);return i[o].rootNodes.push(l),n(l.__render())})(),e(i," sections.")]},"P?u)3":function(t,n,a){return[e(t,"After registering the alias, in the template html file, you can use the alias of the form "),(()=>{const e=i("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"md-[component]");return t[o].rootNodes.push(e),e})(),e(t," directly:")]}},attributes:{}}}};"undefined"!=typeof jinge?jinge.i18n.__regLoc(e):window.JINGE_I18N_DATA=e}();