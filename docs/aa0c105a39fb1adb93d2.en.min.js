!function(){const e={locale:"en",dictionary:{"cN2y#":"Name","irK?+":"Description",o1PP5:"Default","b7z[W":"Parameters","pD3H^":"Make the label inline. This means that the label will disappear when the input receives a focus.","YZ,@X":"Enable the character counter. Only works with fields that have a <code>md-input</code> or <code>md-textarea</code> with a <code>maxlength</code> or <code>md-counter</code> attributes.","Kb.+r":"Add a clear button on the right of the input.","54&n+":"Add a toggle button on the right of the input to reveal/hide the password. Only works with fields that have a <code>md-input</code> with type password.","Z-^l4":"Triggered after a mouse click on clear icon. Only fired when md-clearable is true.","0}@LT":"Value bind to input.","O m-^":"The input type. Similar to HTML5 type attribute.","O)2i>":"The input placeholder. Similar to HTML5 placeholder attribute.",ri_q6:"The input required. Similar to HTML5 required attribute.","rW+UM":"The input id. Similar to HTML5 id attribute.","JBb&e":"The input name. Similar to HTML5 name attribute.",T0QLB:"Disable the input and prevent it interactions.","k>sm[":"Enable the counter for the field and set a maxlength","Je.mI":"Enable the counter for the field. This is useful when you want only a counter without setting a maxlength. After setting a maxlength, in case if you do not want to display the counter, set this prop to false","V*LH?":"The event when the text changes, equivalent to the input event of the native input tag.","0r[$s":"Value bind to textarea.",WQxCF:"Enable the textarea autogrow with content.",kO4zh:"The event when the text changes, equivalent to the input event of the native textarea tag.","V3(6B":"Text fields allow users to input, edit and select text typically inside forms. But they can appear in other places as well like dialog boxes and search.","fC/ W":"Input & Textarea",fNTs0:"Fields mimic the HTML5 attributes to keep the same compatibility with native inputs, but has extra options. This allows Vue Material to accordingly setup the various <code>md-field</code> with its corresponding input options.","v+[%8":"Errors and Messages",OMr6z:"You can add validation states to show error messages. ",LCJkO:"Character count","yc$~(":"You can use character counters where you need to limit the user input, like on Twitter's 280 character tweet:","Je,Rn":"Icons","C}J&(":"Sometimes we may want to differentiate our inputs based on it content value:","A'E(":"Inline Actions","ht`sY":"Fields can have a clearable feature to make it easier for users to clear the value. To use passwords better we can show a toggle button to reveal the password. This is really useful for mobile applications:",OGAvR:"Prefixes & suffixes","x *T,":"Prefixes and suffixes can be used to clarify units or to add input in advance. Prefixes are left justified in the text field whereas suffixes are right justified. Text fields can have both prefixes and suffixes.",hmJsS:"Input & Textarea","Tf*L.":"Initial Value","S^,C<":"Initial Value (Readonly)","N/T<)":"Type here...","67hQT":"Some helper text","pNn)Z":"Label","k}L04":"A nice placeholder","3y9Q":"Inline","5t_}v":"Number","uk0~[":"Textarea",Dq6ha:"Autogrow textarea","tlgq|":"Disabled"},render:function(e,t,o,n,a,i,r,s,l,u){return{components:{"5HYtU":function(t,n,a){return[e(t,"form fields work with a "),(()=>{const e=i("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"md-field");return t[o].rootNodes.push(e),e})(),e(t," wrapped around an input component, that can be "),(()=>{const e=i("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"md-input");return t[o].rootNodes.push(e),e})(),e(t,", "),(()=>{const e=i("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"md-textarea");return t[o].rootNodes.push(e),e})(),e(t," or even a "),(()=>{const e=i("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"md-select");return t[o].rootNodes.push(e),e})(),e(t,".")]},VYT9M:function(t,n,a){return[e(t,"You will be able to set the same properties of a regular "),(()=>{const e=i("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"input");return t[o].rootNodes.push(e),e})(),e(t," element on "),(()=>{const e=i("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"md-input");return t[o].rootNodes.push(e),e})(),e(t,". This is also valid for "),(()=>{const e=i("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"textarea");return t[o].rootNodes.push(e),e})(),e(t," and "),(()=>{const e=i("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"select");return t[o].rootNodes.push(e),e})(),e(t,". Take a look:")]},"u]Vh{":function(t,n,a){return[e(t,"Any "),(()=>{const e=i("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"input");return t[o].rootNodes.push(e),e})(),e(t," or "),(()=>{const e=i("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"textarea");return t[o].rootNodes.push(e),e})(),e(t," attributes can be used on "),(()=>{const e=i("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"md-input");return t[o].rootNodes.push(e),e})(),e(t,"/"),(()=>{const e=i("code",Object.assign({[n||""]:n?"":null},t[o].compStyle),"md-textarea");return t[o].rootNodes.push(e),e})(),e(t," respectively.")]}},attributes:{}}}};"undefined"!=typeof jinge?jinge.i18n.__regLoc(e):window.JINGE_I18N_DATA=e}();