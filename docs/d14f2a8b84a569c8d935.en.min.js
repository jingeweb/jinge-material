!function(){const e={locale:"en",dictionary:{"cN2y#":"Name","irK?+":"Description",o1PP5:"Default",C2OD_:"A value indicating progress. When this parameter is not specified, the spinner appears as a spin loading state; when this parameter is specified, the spinner appears as a progress bar.",way3p:'Icon size can be specified as a number, as a css string value, or as one of the "small"/"normal"/"large"(corresponds to 36px, 48px, 64px).',eernU:"Use primary color.","X*3@,":"Use secondary color.","baPj*":"When you need to typeset Spinner and text, if the parent element does not use flex layout, you need to use md-ajust-baseline to adjust the baseline.","6|*Lf":"Spinner indicating the loading state","5^m&>":"Spinner indicating specific load progress","RQ^@~":"Use Spinner in Button","*+'O":"Spinner",zxI4t:"Spinner before text",ldKdG:"Submit","oL!H{":"Search"},render:function(e,t,n,o,s,i,a,r,c,l){return{components:{ILtl7:function(t,o,s){return[e(t,"This component is often used to indicate the state of loading, submitting, etc., and can also be used to specifically indicate the progress of loading. To simplify the API, decide whether a Spinner belongs to a type by specifying a "),(()=>{const e=i("code",Object.assign({[o||""]:o?"":null},t[n].compStyle),"value");return t[n].rootNodes.push(e),e})(),e(t," attribute.")]},"gz!L4":function(t,o,s){return[e(t,"When the "),(()=>{const e=i("code",Object.assign({[o||""]:o?"":null},t[n].compStyle),"value");return t[n].rootNodes.push(e),e})(),e(t," attribute is specified, it is a spinner that indicates the specific loading progress, and the "),(()=>{const e=i("code",Object.assign({[o||""]:o?"":null},t[n].compStyle),"value");return t[n].rootNodes.push(e),e})(),e(t," attribute is a number from 0-100.")]},"Rp&-$":function(t,o,s){return[e(t,"When the "),(()=>{const e=i("code",Object.assign({[o||""]:o?"":null},t[n].compStyle),"value");return t[n].rootNodes.push(e),e})(),e(t," attribute is not specified, Spinner indicating the loading state, and it appears as a rotating loading animation.")]},"Y;XV>":function(t,o,s){return[e(t,"By default, the size of Spinner is "),(()=>{const e=i("code",Object.assign({[o||""]:o?"":null},t[n].compStyle),"1em");return t[n].rootNodes.push(e),e})(),e(t,"(the font size) and the color is "),(()=>{const e=i("code",Object.assign({[o||""]:o?"":null},t[n].compStyle),"currentColor");return t[n].rootNodes.push(e),e})(),e(t," (the text color). In actual use, you can change the size and color of the spinner by adjusting the font size and color of the parent element, or you can adjust it through the following classes:")]},"PZPd]":function(s,a,c){return[e(s,"Spinner that automatically adapts "),(()=>{const e=i("span",Object.assign({style:"font-size: 2em;",[a||""]:a?"":null},s[n].compStyle),"text size",...(()=>{const e=t({[n]:{compStyle:{[a||""]:a||null},context:s[n].context},class:"md-adjust-baseline"}),i=r.create(e);return s[n].nonRootCompNodes.push(i),o(i.__render())})());return s[n].rootNodes.push(e),e})(),e(s," and "),(()=>{const e=i("span",Object.assign({style:"color: #2196f3;",[a||""]:a?"":null},s[n].compStyle),"color",...(()=>{const e=t({[n]:{compStyle:{[a||""]:a||null},context:s[n].context},class:"md-adjust-baseline"}),i=r.create(e);return s[n].nonRootCompNodes.push(i),o(i.__render())})());return s[n].rootNodes.push(e),e})()]}},attributes:{}}}};"undefined"!=typeof jinge?jinge.i18n.__regLoc(e):window.JINGE_I18N_DATA=e}();